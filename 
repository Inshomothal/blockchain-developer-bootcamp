[1mdiff --git a/contracts/Token.sol b/contracts/Token.sol[m
[1mindex ccb4b2b..1cc4775 100644[m
[1m--- a/contracts/Token.sol[m
[1m+++ b/contracts/Token.sol[m
[36m@@ -42,15 +42,27 @@[m [mcontract Token {[m
         returns (bool success) [m
     {[m
         require(balanceOf[msg.sender] >= _value);[m
[32m+[m[41m        [m
[32m+[m[32m        _transfer(msg.sender, _to, _value);[m
[32m+[m
[32m+[m[32m        return true;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    function _transfer([m
[32m+[m[32m        address _from,[m[41m [m
[32m+[m[32m        address _to,[m[41m [m
[32m+[m[32m        uint256 _value[m
[32m+[m[32m    ) internal {[m
         require(_to != address(0));[m
         [m
[31m-        balanceOf[msg.sender] = balanceOf[msg.sender] - _value;[m
[32m+[m[32m        balanceOf[_from] = balanceOf[_from] - _value;[m
         balanceOf[_to] = balanceOf[_to] + _value;[m
 [m
[31m-        emit Transfer(msg.sender, _to, _value);[m
[32m+[m[32m        emit Transfer(_from, _to, _value);[m
 [m
[31m-        return true;[m
[31m-    }[m
[32m+[m[41m        [m
[32m+[m[41m        [m
[32m+[m[32m    }[m[41m [m
 [m
     function approve(address _spender, uint256 _value) [m
         public [m
[36m@@ -71,8 +83,13 @@[m [mcontract Token {[m
         public [m
         returns (bool success) [m
     {[m
[31m-        // check approval[m
[32m+[m[32m        require(_value <= balanceOf[_from]);[m
[32m+[m[32m        require(_value <= allowance[_from][msg.sender]);[m
[32m+[m[41m        [m
[32m+[m[32m        allowance[_from][msg.sender] = allowance[_from][msg.sender] - _value;[m
[32m+[m[41m        [m
[32m+[m[32m        _transfer(_from, _to, _value);[m
 [m
[31m-        // spend tokens[m
[32m+[m[32m        return true;[m
     } [m
 }[m
[1mdiff --git a/test/Token.js b/test/Token.js[m
[1mindex dddd9c5..8188cef 100644[m
[1m--- a/test/Token.js[m
[1m+++ b/test/Token.js[m
[36m@@ -1,10 +1,21 @@[m
 const { ethers } = require("hardhat");[m
 const { expect } = require('chai');[m
[32m+[m[32mconst { invalid } = require("moment");[m
 [m
 const tokens = (n) => {[m
     return ethers.utils.parseUnits(n.toString() , 'ether')[m
 }[m
 [m
[32m+[m[32mconst transferEmit = async () => {[m
[32m+[m[32m    const event = result.events[0][m
[32m+[m[32m    expect(event.event).to.equal('Transfer')[m
[32m+[m[41m                [m
[32m+[m[32m    const args = event.args[m
[32m+[m[32m    expect(args.from).to.equal(deployer.address)[m
[32m+[m[32m    expect(args.to).to.equal(receiver.address)[m
[32m+[m[32m    expect(args.value).to.equal(amount)[m
[32m+[m[32m}[m
[32m+[m
 describe('Token', () => {[m
     let token, [m
         accounts, [m
[36m@@ -97,13 +108,7 @@[m [mdescribe('Token', () => {[m
             })[m
 [m
             it('Emits a Transfer event', async () => {[m
[31m-                const event = result.events[0][m
[31m-                expect(event.event).to.equal('Transfer')[m
[31m-                [m
[31m-                const args = event.args[m
[31m-                expect(args.from).to.equal(deployer.address)[m
[31m-                expect(args.to).to.equal(receiver.address)[m
[31m-                expect(args.value).to.equal(amount)[m
[32m+[m[32m                transferEmit()[m
             })[m
         })[m
 [m
[36m@@ -159,5 +164,47 @@[m [mdescribe('Token', () => {[m
         })[m
     }) [m
 [m
[32m+[m[32m    describe ('Delegated Token Transfers', () => {[m
[32m+[m[32m            let amount, transaction, result[m
[32m+[m
[32m+[m[32m            beforeEach(async () => {[m
[32m+[m[32m                amount = tokens(100)[m
[32m+[m[32m                transaction = await token[m
[32m+[m[32m                    .connect(deployer)[m
[32m+[m[32m                    .approve(exchange.address, amount)[m
[32m+[m[32m                result = await transaction.wait()[m
[32m+[m[32m            })[m
[32m+[m
[32m+[m[32m        describe ('Success', () => {[m
[32m+[m[32m            beforeEach(async () => {[m
[32m+[m[32m                transaction = await token[m
[32m+[m[32m                    .connect(exchange)[m
[32m+[m[32m                    .transferFrom(deployer.address, receiver.address, amount)[m
[32m+[m[32m                result = await transaction.wait()[m
[32m+[m[32m            })[m
[32m+[m[41m            [m
[32m+[m[32m            it('transfers token balances', async () => {[m
[32m+[m[32m                expect(await token.balanceOf(deployer.address)).to.equal(tokens(999900))[m
[32m+[m[32m                expect(await token.balanceOf(receiver.address)).to.equal(amount)[m
[32m+[m[32m            })[m
[32m+[m
[32m+[m[32m            it('resets the allowance', async ( ) => {[m
[32m+[m[32m                expect(await token.allowance(deployer.address, exchange.address)).to.be.equal(0)[m
[32m+[m[32m            })[m
[32m+[m[41m            [m
[32m+[m
[32m+[m[32m            it('Emits a Transfer event', async () => {[m
[32m+[m[32m                transferEmit()[m
[32m+[m[32m            })[m
[32m+[m
[32m+[m[32m        })[m
[32m+[m
[32m+[m[32m        describe ('Failure', async () => {[m
[32m+[m[32m            // Attempt to transfer too many tokens[m
[32m+[m[32m            const invalidAmount = tokens(1*10^6) // 100 Millions[m
[32m+[m[32m            await expect(token.connect(exchange).transferFrom(deployer.address, receiver.address, invalidAmount).to.be.reverted)[m
[32m+[m[32m        })[m
[32m+[m[32m    })[m
[32m+[m
     [m
 })[m
